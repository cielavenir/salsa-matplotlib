# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

strategy:
  matrix:
    Linux_py36:
      vmImage: 'ubuntu-16.04'
      python.version: '3.6'
    Linux_py37:
      vmImage: 'ubuntu-16.04'
      python.version: '3.7'
    macOS_py36:
      vmImage: 'macOS-10.14'
      python.version: '3.6'
    macOS_py37:
      vmImage: 'macOS-10.15'
      python.version: '3.7'
    macOS_py38:
      vmImage: 'macOS-latest'
      python.version: '3.8'
    Windows_py36:
      vmImage: 'vs2017-win2016'
      python.version: '3.6'
    Windows_py37:
      vmImage: 'vs2017-win2016'
      python.version: '3.7'
    Windows_py38:
      vmImage: 'windows-latest'
      python.version: '3.8'
    Windows_pyPre:
      vmImage: 'vs2017-win2016'
      python.version: 'Pre'
  maxParallel: 4

pool:
  vmImage: '$(vmImage)'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    architecture: 'x64'
  displayName: 'Use Python $(python.version)'
  condition: and(succeeded(), ne(variables['python.version'], 'Pre'))

- task: stevedower.python.InstallPython.InstallPython@1
  displayName: 'Use prerelease Python'
  inputs:
    prerelease: true
  condition: and(succeeded(), eq(variables['python.version'], 'Pre'))

- task: NuGetToolInstaller@0
  displayName: 'Use latest available Nuget'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- bash: |
    set -e
    case "$(python -c 'import sys; print(sys.platform)')" in
    linux)
      sudo apt-get update
      sudo apt-get install \
        cm-super \
        dvipng \
        ffmpeg \
        gdb \
        gir1.2-gtk-3.0 \
        graphviz \
        inkscape \
        libcairo2 \
        libgeos-dev \
        libgirepository-1.0.1 \
        lmodern \
        fonts-freefont-otf \
        texlive-pictures \
        texlive-fonts-recommended \
        texlive-latex-base \
        texlive-latex-extra \
        texlive-latex-recommended \
        texlive-xetex texlive-luatex
      ;;
    darwin)
      brew cask install xquartz
      brew install pkg-config ffmpeg imagemagick mplayer ccache
      ;;
    win32)
      nuget install libpng-msvc14-x64 -ExcludeVersion -OutputDirectory "$(build.BinariesDirectory)"
      nuget install zlib-msvc14-x64 -ExcludeVersion -OutputDirectory "$(build.BinariesDirectory)"
      echo "##vso[task.prependpath]$(build.BinariesDirectory)\libpng-msvc14-x64\build\native\bin_release"
      echo "##vso[task.prependpath]$(build.BinariesDirectory)\zlib-msvc14-x64\build\native\bin_release"
      echo "##vso[task.setvariable variable=CL]/I$(build.BinariesDirectory)\libpng-msvc14-x64\build\native\include /I$(build.BinariesDirectory)\zlib-msvc14-x64\build\native\include"
      echo "##vso[task.setvariable variable=LINK]/LIBPATH:$(build.BinariesDirectory)\libpng-msvc14-x64\build\native\lib_release /LIBPATH:$(build.BinariesDirectory)\zlib-msvc14-x64\build\native\lib_release"
      ;;
    *)
      exit 1
      ;;
    esac
  displayName: 'Install dependencies'

- bash: |
    python -m pip install --upgrade pip
    python -m pip install -r requirements/testing/travis_all.txt -r requirements/testing/travis36.txt ||
      [[ "$PYTHON_VERSION" = 'Pre' ]]
  displayName: 'Install dependencies with pip'

- bash: |
    MPLLOCALFREETYPE=1 python -m pip install -ve . ||
      [[ "$PYTHON_VERSION" = 'Pre' ]]
  displayName: "Install self"

- script: env
  displayName: 'print env'

- bash: |
    PYTHONFAULTHANDLER=1 python -m pytest --junitxml=junit/test-results.xml -raR --maxfail=50 --timeout=300 --durations=25 --cov-report= --cov=lib -n 2 ||
      [[ "$PYTHON_VERSION" = 'Pre' ]]
  displayName: 'pytest'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Python $(python.version)'
  condition: succeededOrFailed()
