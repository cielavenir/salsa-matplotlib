From 84aa9f77e61df45682dd7867d35191184414c7b0 Mon Sep 17 00:00:00 2001
From: Thomas A Caswell <tcaswell@gmail.com>
Date: Mon, 5 Oct 2015 21:40:20 -0400
Subject: [PATCH] TST: properly fence-post qt{4,5} backend tests

This issue is that the new 'default' qt version is 5 if it is
available.  In the tests the backend is Agg so we are hitting the
fall through behavior.  If both pyqt4 and pyqt5 are installed, then
`QtCore` will be from PyQt5, but the backend_qt4Agg code assumes that it
is seeing the PyQt4 version of the classes.  This results in error on
`__init__` due to the change between PyQt4 and PyQt5.

Added test_backend_qt5.py to white listed tests.

closes #5194
---
 lib/matplotlib/__init__.py               |  1 +
 lib/matplotlib/tests/test_backend_qt4.py |  9 +++++++--
 lib/matplotlib/tests/test_backend_qt5.py | 20 +++++++++++---------
 3 files changed, 19 insertions(+), 11 deletions(-)

diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index 88842ae..8f7378e 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1429,6 +1429,7 @@ def tk_window_focus():
     'matplotlib.tests.test_backend_pgf',
     'matplotlib.tests.test_backend_ps',
     'matplotlib.tests.test_backend_qt4',
+    'matplotlib.tests.test_backend_qt5',
     'matplotlib.tests.test_backend_svg',
     'matplotlib.tests.test_basic',
     'matplotlib.tests.test_bbox_tight',
diff --git a/lib/matplotlib/tests/test_backend_qt4.py b/lib/matplotlib/tests/test_backend_qt4.py
index b59eda3..f32cf74 100644
--- a/lib/matplotlib/tests/test_backend_qt4.py
+++ b/lib/matplotlib/tests/test_backend_qt4.py
@@ -17,6 +17,7 @@
 
 try:
     from matplotlib.backends.qt_compat import QtCore
+
     from matplotlib.backends.backend_qt4 import (MODIFIER_KEYS,
                                                  SUPER, ALT, CTRL, SHIFT)
 
@@ -24,7 +25,11 @@
     _, AltModifier, AltKey = MODIFIER_KEYS[ALT]
     _, SuperModifier, SuperKey = MODIFIER_KEYS[SUPER]
     _, ShiftModifier, ShiftKey = MODIFIER_KEYS[SHIFT]
-    HAS_QT = True
+    py_qt_ver = int(QtCore.PYQT_VERSION_STR.split('.')[0])
+    if py_qt_ver != 4:
+        HAS_QT = False
+    else:
+        HAS_QT = True
 except ImportError:
     HAS_QT = False
 
@@ -33,7 +38,7 @@
 @knownfailureif(not HAS_QT)
 @switch_backend('Qt4Agg')
 def test_fig_close():
-    #save the state of Gcf.figs
+    # save the state of Gcf.figs
     init_figs = copy.copy(Gcf.figs)
 
     # make a figure using pyplot interface
diff --git a/lib/matplotlib/tests/test_backend_qt5.py b/lib/matplotlib/tests/test_backend_qt5.py
index 9fa5160..b5ebf2f 100644
--- a/lib/matplotlib/tests/test_backend_qt5.py
+++ b/lib/matplotlib/tests/test_backend_qt5.py
@@ -4,7 +4,7 @@
 from matplotlib.externals import six
 
 from matplotlib import pyplot as plt
-from matplotlib.testing.decorators import cleanup
+from matplotlib.testing.decorators import cleanup, switch_backend
 from matplotlib.testing.decorators import knownfailureif
 from matplotlib._pylab_helpers import Gcf
 import copy
@@ -24,17 +24,19 @@
     _, AltModifier, AltKey = MODIFIER_KEYS[ALT]
     _, SuperModifier, SuperKey = MODIFIER_KEYS[SUPER]
     _, ShiftModifier, ShiftKey = MODIFIER_KEYS[SHIFT]
-    HAS_QT = True
+    py_qt_ver = int(QtCore.PYQT_VERSION_STR.split('.')[0])
+    if py_qt_ver != 5:
+        HAS_QT = False
+    else:
+        HAS_QT = True
 except ImportError:
     HAS_QT = False
 
 
 @cleanup
 @knownfailureif(not HAS_QT)
+@switch_backend('Qt5Agg')
 def test_fig_close():
-    # force switch to the Qt5 backend
-    plt.switch_backend('Qt5Agg')
-
     # save the state of Gcf.figs
     init_figs = copy.copy(Gcf.figs)
 
@@ -50,6 +52,7 @@ def test_fig_close():
     assert(init_figs == Gcf.figs)
 
 
+@switch_backend('Qt5Agg')
 def assert_correct_key(qt_key, qt_mods, answer):
     """
     Make a figure
@@ -57,7 +60,6 @@ def assert_correct_key(qt_key, qt_mods, answer):
     Catch the event
     Assert sent and caught keys are the same
     """
-    plt.switch_backend('Qt5Agg')
     qt_canvas = plt.figure().canvas
 
     event = mock.Mock()
@@ -101,7 +103,7 @@ def test_control():
 def test_unicode_upper():
     assert_correct_key(QtCore.Qt.Key_Aacute,
                        ShiftModifier,
-                       unichr(193))
+                       chr(193))
 
 
 @cleanup
@@ -109,7 +111,7 @@ def test_unicode_upper():
 def test_unicode_lower():
     assert_correct_key(QtCore.Qt.Key_Aacute,
                        QtCore.Qt.NoModifier,
-                       unichr(225))
+                       chr(225))
 
 
 @cleanup
@@ -133,7 +135,7 @@ def test_control_alt():
 def test_modifier_order():
     assert_correct_key(QtCore.Qt.Key_Aacute,
                        (ControlModifier | AltModifier | SuperModifier),
-                       'ctrl+alt+super+' + unichr(225))
+                       'ctrl+alt+super+' + chr(225))
 
 
 @cleanup
